require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

const token = process.env.TELEGRAM_BOT_TOKEN;
const appUrl = process.env.APP_BASE_URL;

if (!token || !appUrl) {
    console.error("Missing critical environment variables. Check your .env file.");
    process.exit(1);
}

process.title = 'telegram-drawing-bot';

const bot = new TelegramBot(token, { polling: true });

bot.on('polling_error', (err) => {
    console.error('[polling_error]', err);
    if (err && err.code === 'ETELEGRAM' && /409/.test(String(err.message))) {
        process.exit(1);
    }
});

console.log("ü§ñ Bot is running and waiting for commands...");

function makeRoomUrl(room) {
    const base = appUrl.replace(/\/+$/, '');
    return `${base}/?room=${encodeURIComponent(room)}`;
}

function makeStartAppPayload(room) {
    return encodeURIComponent('r_' + room);
}

bot.onText(/^\/start(?:\s+(.*))?$/, (msg, match) => {
    const chatId = msg.chat.id.toString();
    if (msg.chat.type !== 'private') return;
    const startParam = (match && match[1]) ? match[1].trim() : '';
    let room = chatId;
    if (startParam && startParam.startsWith('r_')) {
        const decoded = decodeURIComponent(startParam.slice(2));
        if (decoded) room = decoded;
    }
    const url = makeRoomUrl(room);
    const options = { reply_markup: { inline_keyboard: [[{ text: 'üé® Open Here', web_app: { url } }, { text: 'üåê Open in Browser', url }]] } };
    bot.sendMessage(chatId, 'Launch canvas:', options).catch(console.error);
});

bot.onText(/^\/draw(?:@\w+)?$/, async (msg) => {
    const chatId = msg.chat.id.toString();
    const isPrivate = msg.chat.type === 'private';
    const url = makeRoomUrl(chatId);

    if (isPrivate) {
        const options = { reply_markup: { inline_keyboard: [[{ text: 'üé® Open Here', web_app: { url } }, { text: 'üåê Open in Browser', url }]] } };
        bot.sendMessage(chatId, 'Tap a button to open your shared canvas.', options).catch(console.error);
        return;
    }

    const me = await bot.getMe();
    const startapp = makeStartAppPayload(chatId);
    const startAppLink = `https://t.me/${me.username}?startapp=${startapp}`;

    // DM fallback inline button
    const userId = msg.from && msg.from.id ? msg.from.id.toString() : null;
    if (userId) {
        try {
            const options = { reply_markup: { inline_keyboard: [[{ text: 'üé® Open Here', web_app: { url } }]] } };
            await bot.sendMessage(userId, 'Open the group canvas here:', options);
        } catch {}
    }

    bot.sendMessage(chatId, `Launch Mini App: ${startAppLink}`).catch(console.error);
});

// --- –ù–û–í–ò–ô –ö–û–î: –û–±—Ä–æ–±–∫–∞ inline-–∑–∞–ø–∏—Ç—ñ–≤ ---
bot.on('inline_query', (query) => {
    const queryId = query.id;
    const roomName = query.query.trim();

    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–≤—ñ–≤ –ø—ñ—Å–ª—è —ñ–º–µ–Ω—ñ –±–æ—Ç–∞, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    if (!roomName) {
        bot.answerInlineQuery(queryId, []).catch(console.error);
        return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ URL –¥–ª—è –Ω–∞—à–æ–≥–æ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é –∫—ñ–º–Ω–∞—Ç–∏
    const url = makeRoomUrl(roomName);

    // –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —è–∫–∏–π –ø–æ–±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const results = [
        {
            type: 'article',
            id: '1', // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —Ü—å–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            title: `üé® New Canvas "${roomName}"`,
            description: 'Collaborative mode allows everyone to draw simultaneously on the same board.',
            // –¶–µ —Ç–µ, —â–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            input_message_content: {
                message_text: `Let's draw on the canvas: **${roomName}**!`,
                parse_mode: 'Markdown'
            },
            // –ê —Ü–µ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ - –∫–Ω–æ–ø–∫–∞, —â–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î Mini App
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üöÄ Open Canvas',
                            web_app: { url: url }
                        }
                    ]
                ]
            },
            // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É –¥–ª—è –∫—Ä–∞—Å–∏
            thumbnail_url: 'https://i.imgur.com/TZeA09j.png', // –ü—Ä–∏–∫–ª–∞–¥ —ñ–∫–æ–Ω–∫–∏, –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤–æ—é
            thumbnail_width: 64,
            thumbnail_height: 64
        }
    ];

    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç Telegram
    bot.answerInlineQuery(queryId, results, { cache_time: 0 }).catch(console.error);
});