require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

const token = process.env.TELEGRAM_BOT_TOKEN;
const appUrl = process.env.APP_BASE_URL;

if (!token || !appUrl) {
    console.error("Missing critical environment variables. Check your .env file.");
    process.exit(1);
}

process.title = 'telegram-drawing-bot';

const bot = new TelegramBot(token, { polling: true });

bot.on('polling_error', (err) => {
    console.error('[polling_error]', err);
    if (err && err.code === 'ETELEGRAM' && /409/.test(String(err.message))) {
        process.exit(1);
    }
});

console.log("ü§ñ Bot is running and waiting for commands...");

function makeRoomUrl(room) {
    const base = appUrl.replace(/\/+$/, '');
    return `${base}/?room=${encodeURIComponent(room)}`;
}

function makeStartAppPayload(room) {
    return encodeURIComponent('r_' + room);
}

bot.onText(/^\/start(?:\s+(.*))?$/, (msg, match) => {
    const chatId = msg.chat.id.toString();
    if (msg.chat.type !== 'private') return;
    const startParam = (match && match[1]) ? match[1].trim() : '';
    let room = chatId;
    if (startParam && startParam.startsWith('r_')) {
        const decoded = decodeURIComponent(startParam.slice(2));
        if (decoded) room = decoded;
    }
    const url = makeRoomUrl(room);
    const options = { reply_markup: { inline_keyboard: [[{ text: 'üé® Open Here', web_app: { url } }, { text: 'üåê Open in Browser', url }]] } };
    bot.sendMessage(chatId, 'Launch canvas:', options).catch(console.error);
});

bot.onText(/^\/draw(?:@\w+)?$/, async (msg) => {
    const chatId = msg.chat.id.toString();
    const isPrivate = msg.chat.type === 'private';
    const url = makeRoomUrl(chatId);

    if (isPrivate) {
        const options = { reply_markup: { inline_keyboard: [[{ text: 'üé® Open Here', web_app: { url } }, { text: 'üåê Open in Browser', url }]] } };
        bot.sendMessage(chatId, 'Tap a button to open your shared canvas.', options).catch(console.error);
        return;
    }

    const me = await bot.getMe();
    const startapp = makeStartAppPayload(chatId);
    const startAppLink = `https://t.me/${me.username}?startapp=${startapp}`;

    // DM fallback inline button
    const userId = msg.from && msg.from.id ? msg.from.id.toString() : null;
    if (userId) {
        try {
            const options = { reply_markup: { inline_keyboard: [[{ text: 'üé® Open Here', web_app: { url } }]] } };
            await bot.sendMessage(userId, 'Open the group canvas here:', options);
        } catch {}
    }

    bot.sendMessage(chatId, `Launch Mini App: ${startAppLink}`).catch(console.error);
});

// --- –ù–û–í–ò–ô –ö–û–î: –û–±—Ä–æ–±–∫–∞ inline-–∑–∞–ø–∏—Ç—ñ–≤ ---
// –û—Ç—Ä–∏–º–∞–π—Ç–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–æ—Ç–∞ –∑ env-–∑–º—ñ–Ω–Ω–∏—Ö
const botUsername = process.env.TELEGRAM_BOT_USERNAME;
if (!botUsername) {
    console.error("TELEGRAM_BOT_USERNAME is not set in your .env file!");
    process.exit(1);
}

bot.on('inline_query', (query) => {
    const queryId = query.id;
    const roomName = query.query.trim();

    if (!roomName) {
        // –Ø–∫—â–æ –∑–∞–ø–∏—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É
        bot.answerInlineQuery(queryId, [{
            type: 'article',
            id: 'hint',
            title: 'Enter a canvas name',
            input_message_content: {
                message_text: 'Please enter a name for the canvas after mentioning the bot.'
            }
        }], { cache_time: 10 }).catch(console.error);
        return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ payload –¥–ª—è deep-link. –í–∞—à script.js –æ—á—ñ–∫—É—î 'r_ROOMNAME'
    const startAppPayload = makeStartAppPayload(roomName);
    
    // –§–æ—Ä–º—É—î–º–æ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Mini App
    // –§–æ—Ä–º–∞—Ç: https://t.me/USERNAME_BOT/APP_SHORT_NAME?startapp=PAYLOAD
    // APP_SHORT_NAME - —Ü–µ —Ç–µ, —â–æ –≤–∏ –≤–∫–∞–∑–∞–ª–∏ –≤ BotFather (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'draw')
    const appDirectUrl = `https://t.me/${botUsername}/draw?startapp=${startAppPayload}`;

    const results = [
        {
            type: 'article',
            id: '1',
            title: `üé® New Board "${roomName}"`,
            description: 'Collaborative mode allows everyone to draw simultaneously on the same board.',
            
            // –û—Å—å –º–∞–≥—ñ—è: –º–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä—è–º–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.
            // Telegram —Å–∞–º —Å—Ç–≤–æ—Ä–∏—Ç—å –≥–∞—Ä–Ω–∏–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑ –∫–Ω–æ–ø–∫–æ—é.
            input_message_content: {
                message_text: `Board "**${roomName}**"\n${appDirectUrl}`,
                parse_mode: 'Markdown'
            },
            
            // –ù–∞–º –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω reply_markup —Ç—É—Ç
            
            thumbnail_url: 'https://i.imgur.com/TZeA09j.png' // –í–∞—à–∞ —ñ–∫–æ–Ω–∫–∞
        }
    ];

    bot.answerInlineQuery(queryId, results, { cache_time: 0 }).catch(console.error);
});